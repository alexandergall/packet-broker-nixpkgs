#!/bin/bash
set -e

PROFILE_BASE=/nix/var/nix/profiles/per-user/root
PROFILE=$PROFILE_BASE/packet-broker
REPO_GIT="https://github.com//alexandergall/packet-broker-nixpkgs"
REPO_API="https://api.github.com/repos/alexandergall/packet-broker-nixpkgs"

PATH=/nix/var/nix/profiles/default/bin:@PATH@
NIX_PATH=

self=$(basename $0)

usage () {
    echo "usage: $self OPTIONS
       Available options:
         --list-installed
         --list-available
         --switch-to-generation GENERATION
         --install-release RELEASE
         --install-git COMMIT
         --update-release RELEASE
         --uninstall-generation GENERATION
         --activate-current
         --deactivate-current
         --cleanup
         --help"
    exit 0
}

opts=$(getopt -l list-installed \
              -l list-available \
              -l switch-to-generation: \
              -l install-release: \
              -l install-git: \
              -l update-release: \
              -l uninstall-generation: \
              -l activate-current \
              -l deactivate-current \
              -l cleanup \
              -l help \
              -o "" \
              -n $self \
              -- "$@")
[ $? -eq 0 ] || usage
[ $# -eq 0 ] && usage
eval set -- $opts

while [ $# -gt 0 ]; do
    case "$1" in
        --list-available)
            list_available=1
            shift
            ;;
        --list-installed)
            list_installed=1
            shift
            ;;
        --switch-to-generation)
            switch_to_generation=$2
            shift 2
            ;;
        --uninstall-generation)
            uninstall_generation=$2
            shift 2
            ;;
        --install-release)
            install_release=$2
            shift 2
            ;;
        --install-git)
            install_git=$2
            shift 2
            ;;
        --update-release)
            update_release=$2
            shift 2
            ;;
        --activate-current)
            activate=1
            shift
            ;;
        --deactivate-current)
            deactivate=1
            shift
            ;;
        --cleanup)
            cleanup=1
            shift
            ;;
        --help)
            usage
            ;;
        *)
            break
            ;;
    esac
done
[ $# -gt 1 ] && usage

paths_to_rm=()
_cleanup () {
    for path in ${paths_to_rm[@]}; do
        rm -rf $path
    done
}

trap _cleanup EXIT TERM INT

if [ -t 0 -a $(tput colors) -gt 1 ]; then
    red=$(tput setaf 1)
    green=$(tput setaf 2)
    normal=$(tput sgr0)
fi

INFO () {
    echo "${green}INFO: $@${normal}"
}

ERROR () {
    echo "${red}ERROR: $@${normal}" >&2
    exit 1
}

declare -A gens gens_by_id install_dates installed_releases available_releases
declare -A slices

gen_from_path () {
    echo $1 | sed -e 's/.*-\([0-9]*\)-link$/\1/'
}

for path in $PROFILE-*-link; do
    [ -h $path ] || continue
    slice=$(cat $path/slice)
    id=$(cat $path/version):$slice
    gen=$(gen_from_path $path)
    if [ -n "${gens_by_id[$id]}" ]; then
        INFO "Generation $gen is a duplicate of ${gens_by_id[$id]}, ignoring"
    else
        gens[$gen]=$id
        gens_by_id[$id]=$gen
        install_dates[$gen]=$(stat -c "%z" $path)
        slices[$gen]=$slice

        read version gitTag rest < <(echo $id | tr ':' ' ')
        if [ "release-$version" == "$gitTag" ]; then
            installed_releases[$version]="${installed_releases[$version]} $gen"
        fi
    fi
done
current_gen=$(gen_from_path $(readlink $PROFILE))
kernel_release=$(uname -r)

check_root () {
    [ $(id -u) == 0 ] && return
    ERROR "Please run this command as root"
    exit 1
}

### Activate the current profile
SYSTEMD_DIR=/etc/systemd/system
CONFIG_DIR=/etc/packet-broker
CONFIG=$CONFIG_DIR/config.json
SCHEMA=$CONFIG_DIR/schema.json
SNMP_CONFIG_DIR=/etc/snmp
SNMPD_CONFIG=$SNMP_CONFIG_DIR/snmpd.conf
IFINDEX=$SNMP_CONFIG_DIR/ifindex
SNMP_STATE_DIR=/var/lib/snmp
INTERFACE_CONFIG=$SNMP_STATE_DIR/interface.conf
SHELL_PROFILE=/etc/profile.d/packet-broker.sh
activate () {
    check_root
    INFO "Enabling services"
    for service in $PROFILE$SYSTEMD_DIR/*.service; do
        ln -fs $service $SYSTEMD_DIR
        systemctl enable $(basename $service)
    done
    systemctl daemon-reload
    for dir in $CONFIG_DIR $SNMP_CONFIG_DIR $SNMP_STATE_DIR; do
        [ -d $dir ] || mkdir -p $dir
    done
    for file in $SCHEMA $IFINDEX $INTERFACE_CONFIG; do
        ## For some weird reason, the Snabb SNMP agent barfs
        ## when doing a stat() on the ifindex file in the Nix
        ## store. So, instead of linking to the file, we copy
        ## it.  Need to figure what exactly the problem is.
        cp $PROFILE$file $file
    done
    for config in $CONFIG $SNMPD_CONFIG; do
        [ -e $config ] || cp $PROFILE$config $config
    done
    if [ ! -e $SHELL_PROFILE ]; then
        echo PATH=$PROFILE/bin:\$PATH >$SHELL_PROFILE
    fi
    INFO "Starting services"
    systemctl start packet-broker snmpd
}

### Deactivate the current profile
deactivate () {
    check_root
    INFO "Stopping services"
    systemctl stop snmpd packet-broker
    INFO "Disabling services"
    for service in $PROFILE/$SYSTEMD_DIR/*.service; do
        systemctl disable $(basename $service)
    done
    INFO "Unloading kernel modules"
    for module in $(lsmod | awk '{print $1}'); do
        [[ $module =~ bf_ ]] && rmmod $module || true
    done
}

list_installed () {
    echo "Generation Current Release Git Tag                  KernelID       Kernel Release            Install date"
    echo "-------------------------------------------------------------------------------------------------------------------------------"
    for gen in $(printf '%s\n' "${!gens[@]}" | sort -n); do
        read version gitTag kernelID kernelRelease < <(echo ${gens[$gen]} | tr ':' ' ')
        is_current=' '
        [ $gen -eq $current_gen ] && is_current='*'
        printf "%10d $is_current       %-7s %-24s %-14s %-25s %s\n" $gen $version $gitTag $kernelID $kernelRelease "${install_dates[$gen]}"
    done
}

get_available_releases () {
    INFO "Checking for release tags of $REPO_GIT"
    for tag in $(curl $REPO_API/tags 2>/dev/null| jq '.[].name'); do
        gitTag=$(echo $tag | sed -e 's/"//g')
        [[ $gitTag =~ ^release-.*$ ]] || continue
        version=$(echo $gitTag | cut -d- -f2)
        available_releases[$version]=$gitTag
    done
}

list_available () {
    get_available_releases
    echo
    echo "Version  Status"
    echo "-----------------------------------------------"
    for version in $(printf '%s\n' "${!available_releases[@]}" | sort); do
        printf "%8s  " $version
        if [ -n "${installed_releases[$version]}" ]; then
            printf 'Installed in generaton(s) %s\n'\
                   $(echo "${installed_releases[$version]}" | sed -e 's/^ //;s/ /, /g')
        else
            echo "Not installed"
        fi
    done
}

switch_to_generation () {
    check_root
    if [ -z "${gens[$switch_to_generation]}" ]; then
        ERROR "Generation $switch_to_generation does not exist"
    fi
    if [ $switch_to_generation -eq $current_gen ]; then
        ERROR "Generation $switch_to_generation is already the current version"
    fi
    INFO "Deactivating current instance"
    deactivate
    nix-env -p $PROFILE --switch-generation $switch_to_generation
    ## The new release may have a different activation procedure.  Use
    ## its native release-manager to perform the activation.
    INFO "Activating new instance"
    $PROFILE/bin/release-manager --activate
}

_check_installed () {
    id=$(nix eval --raw \
	     '(with import ./. { gitTag = "'$gitTag'"; kernelRelease = "'$kernel_release'"; };
               with install; with builtins;
               replaceStrings ["\n"] [""] (readFile (versionFile + "/version") + ":" +
                                           readFile (sliceFile + "/slice")))')
    gen=${gens_by_id[$id]}
    if [ -n "$gen" ]; then
        ERROR "Release $version (Id: $id) is already installed as generation $gen"
    fi
}

_install () {
    gitTag=$1
    nix-env -f . -p $PROFILE -r -i -A install --argstr gitTag $gitTag --argstr kernelRelease $kernel_release
    new_gen=$(gen_from_path $(readlink $PROFILE))
    ## nix-env has automatically switched to the new
    ## generation, revert back
    nix-env -p $PROFILE --switch-generation $current_gen 2>/dev/null

    INFO "Use \"release-manager --switch-to-generation $new_gen\" to switch to the new release"
}

install_git () {
    check_root
    tmp=$(mktemp -d)
    paths_to_rm+=$tmp
    pushd $tmp >/dev/null
    INFO "Fetching $install_git"
    git init -b master
    git remote add origin $REPO_GIT
    git fetch origin
    git reset --hard $install_git

    gitTag=$(git describe --always)
    if ! [[ "$gitTag" =~ ^release-.*$ ]]; then
        ERROR "Commits preceeding release-1 are not supported"
    fi
    _check_installed
    _install $gitTag

    popd >/dev/null
}

_check_release () {
    local release
    release=$1
    get_available_releases
    gitTag=${available_releases[$release]}
    if [ -z "$gitTag" ]; then
        ERROR "Release $release does not exist"
    fi
}

install_release () {
    _check_release $install_release
    check_root
    tarball=$REPO_GIT/archive/$gitTag.tar.gz
    INFO "Fetching package release tarball $tarball"
    tmp=$(mktemp -d)
    paths_to_rm+=$tmp
    pushd $tmp >/dev/null
    curl -L -O $tarball 2>/dev/null
    tar xf release-* --strip-component 1
    _check_installed
    _install $gitTag
    popd >/dev/null
}

update_release () {
    _check_release $update_release
    check_root
    result=$(curl $REPO_API/git/ref/heads/$gitTag 2>/dev/null)
    if [ "$(jq '.message' <<<$result)" == '"Not Found"' ]; then
        ERROR "Branch $gitTag does not exist"
    fi
    install_git=$(jq '.object.sha' <<<$result | sed -e 's/"//g')
    install_git
}

uninstall_generation () {
    check_root
    if [ -z "${gens[$uninstall_generation]}" ]; then
        ERROR "Generation $uninstall_generation does not exist"
    fi
    if [ $uninstall_generation -eq $current_gen ]; then
        ERROR "Can't uninstall current generation"
    fi
    nix-env -p $PROFILE --delete-generations $uninstall_generation
}

cleanup () {
    nix-collect-garbage
}

[ -n "$list_installed" ] && list_installed
[ -n "$list_available" ] && list_available
[ -n "$switch_to_generation" ] && switch_to_generation
[ -n "$install_release" ] && install_release
[ -n "$install_git" ] && install_git
[ -n "$update_release" ] && update_release
[ -n "$uninstall_generation" ] && uninstall_generation
[ -n "$activate" ] && activate
[ -n "$deactivate" ] && deactivate
[ -n "$cleanup" ] && cleanup
